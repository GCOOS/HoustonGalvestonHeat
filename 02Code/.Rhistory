knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(ggplot2)
YearJournal <- read.csv("../01Data/October24_Revision/Journal_Year.csv")
GeneralInfo <- read.csv("../01Data/October24_Revision/GeneralInfo.csv")
NeiDescribed <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Described.csv")
NeiTested <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Tested.csv")
##the easier ones
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "USA"] <- "United States"
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "Other:"] <- "Australia"
CountryTable <- sort(table(GeneralInfo$Country.in.which.the.study.conducted), decreasing = TRUE)
#LocType <- sort(table(ExtractDat$Location.Type), decreasing = TRUE)
ManagType <- sort(table(GeneralInfo$Maintenance.vs.Stewardship), decreasing = TRUE)
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Establishment" | GeneralInfo$Tree.Age == "Juvenile"] <- "Establishment/Juvenile"
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Other"] <- "Unknown"
AgeClass <- sort(table(GeneralInfo$Tree.Age), decreasing = TRUE)
MS_Age <- table(GeneralInfo[c("Tree.Age", "Maintenance.vs.Stewardship")])
#For all papers
AgeClass_mat <- as.data.frame(matrix(0, ncol=2, nrow=length(names(AgeClass))))
AgeClass_mat[,1] <- names(AgeClass)
AgeClass_mat[,2] <- as.vector(AgeClass)
names(AgeClass_mat) <- c("group", "value")
BrewPO <- brewer.pal(n = 5, name = "PuOr")
customPallette <- c(BrewPO[5], BrewPO[1], BrewPO[2], BrewPO[3])
PieOverall <- ggplot(AgeClass_mat, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="black") +
coord_polar("y", start=0) + theme_void() +
scale_fill_manual(values = customPallette)
#Maintenance
Maint_Age <- rowSums(MS_Age[,c(colnames(MS_Age) == "Both" | colnames(MS_Age) == "Maintenance")])
Maint_Age_mat <- as.data.frame(matrix(0, ncol=2, nrow=length(names(Maint_Age))))
Maint_Age_mat[,1] <- names(Maint_Age)
Maint_Age_mat[,2] <- as.vector(Maint_Age)
names(Maint_Age_mat) <- c("group", "value")
PieMaint <- ggplot(Maint_Age_mat, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="black") +
coord_polar("y", start=0) + theme_void() +
scale_fill_manual(values = customPallette)
#Stewardship
Stew_Age <- rowSums(MS_Age[,c(colnames(MS_Age) == "Both" | colnames(MS_Age) == "Stewardship")])
Stew_Age_mat <- as.data.frame(matrix(0, ncol=2, nrow=length(names(Stew_Age))))
Stew_Age_mat[,1] <- names(Stew_Age)
Stew_Age_mat[,2] <- as.vector(Stew_Age)
names(Stew_Age_mat) <- c("group", "value")
PieStew <- ggplot(Stew_Age_mat, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="black") +
coord_polar("y", start=0) + theme_void() +
scale_fill_manual(values = customPallette)
Stew_Age_mat
7/21
Maint_Age_mat
NeiDescribed_counts <- colSums(NeiDescribed[3:31], na.rm=TRUE)
NeiTested_counts<- colSums(NeiTested[3:31], na.rm=TRUE)
head(NeiDescribed)
##extra look
PestPapers <- GeneralInfo[GeneralInfo$Pest.management == 1, ]
head(PestPapers)
names(PestPapers)
head(NeiDescribed$Title)
View(NeiDescribed)
head(PestPapers$Title)
View(PestPapers)
NeiDescribed_pest <- NeiDescribed[NeiDescribed$Title %in% PestPapers$Title,]
length(NeiDescribed_pest$Title)
length(PestPapers$Title)
PestPapers$Title
NeiDescribed$Title %in% PestPapers$Title
sum(NeiDescribed$Title %in% PestPapers$Title)
PestPapers$Title[ !(PestPapers$Title %in% NeiDescribed_pest$Title)]
YearJournal <- read.csv("../01Data/October24_Revision/Journal_Year.csv")
GeneralInfo <- read.csv("../01Data/October24_Revision/GeneralInfo.csv")
NeiDescribed <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Described.csv")
NeiTested <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Tested.csv")
##the easier ones
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "USA"] <- "United States"
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "Other:"] <- "Australia"
CountryTable <- sort(table(GeneralInfo$Country.in.which.the.study.conducted), decreasing = TRUE)
#LocType <- sort(table(ExtractDat$Location.Type), decreasing = TRUE)
ManagType <- sort(table(GeneralInfo$Maintenance.vs.Stewardship), decreasing = TRUE)
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Establishment" | GeneralInfo$Tree.Age == "Juvenile"] <- "Establishment/Juvenile"
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Other"] <- "Unknown"
AgeClass <- sort(table(GeneralInfo$Tree.Age), decreasing = TRUE)
MS_Age <- table(GeneralInfo[c("Tree.Age", "Maintenance.vs.Stewardship")])
NeiDescribed_counts <- colSums(NeiDescribed[3:31], na.rm=TRUE)
NeiTested_counts<- colSums(NeiTested[3:31], na.rm=TRUE)
##extra look
PestPapers <- GeneralInfo[GeneralInfo$Pest.management == 1, ]
#this is missing some
NeiDescribed_pest <- NeiDescribed[NeiDescribed$Title %in% PestPapers$Title,]
length(NeiDescribed_pest)
length(NeiDescribed_pest$Title)
length(PestPapers$Title)
sum(NeiDescribed_pest$Tree.disease.history.and.initial.health)
sum(na.omit(NeiDescribed_pest$Tree.disease.history.and.initial.health))
13/23
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(ggplot2)
YearJournal <- read.csv("../01Data/October24_Revision/Journal_Year.csv")
GeneralInfo <- read.csv("../01Data/October24_Revision/GeneralInfo.csv")
NeiDescribed <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Described.csv")
NeiTested <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Tested.csv")
##the easier ones
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "USA"] <- "United States"
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "Other:"] <- "Australia"
CountryTable <- sort(table(GeneralInfo$Country.in.which.the.study.conducted), decreasing = TRUE)
#LocType <- sort(table(ExtractDat$Location.Type), decreasing = TRUE)
ManagType <- sort(table(GeneralInfo$Maintenance.vs.Stewardship), decreasing = TRUE)
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Establishment" | GeneralInfo$Tree.Age == "Juvenile"] <- "Establishment/Juvenile"
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Other"] <- "Unknown"
AgeClass <- sort(table(GeneralInfo$Tree.Age), decreasing = TRUE)
MS_Age <- table(GeneralInfo[c("Tree.Age", "Maintenance.vs.Stewardship")])
#For all papers
AgeClass_mat <- as.data.frame(matrix(0, ncol=2, nrow=length(names(AgeClass))))
AgeClass_mat[,1] <- names(AgeClass)
AgeClass_mat[,2] <- as.vector(AgeClass)
names(AgeClass_mat) <- c("group", "value")
AgeClass_mat
25/82
YearJournal <- read.csv("../01Data/October24_Revision/Journal_Year.csv")
GeneralInfo <- read.csv("../01Data/October24_Revision/GeneralInfo.csv")
NeiDescribed <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Described.csv")
NeiTested <- read.csv("../01Data/October24_Revision/NeiCharacteristics_Tested.csv")
##the easier ones
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "USA"] <- "United States"
GeneralInfo$Country.in.which.the.study.conducted[GeneralInfo$Country.in.which.the.study.conducted == "Other:"] <- "Australia"
CountryTable <- sort(table(GeneralInfo$Country.in.which.the.study.conducted), decreasing = TRUE)
#LocType <- sort(table(ExtractDat$Location.Type), decreasing = TRUE)
ManagType <- sort(table(GeneralInfo$Maintenance.vs.Stewardship), decreasing = TRUE)
#GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Establishment" | GeneralInfo$Tree.Age == "Juvenile"] <- "Establishment/Juvenile"
GeneralInfo$Tree.Age[GeneralInfo$Tree.Age == "Other"] <- "Unknown"
AgeClass <- sort(table(GeneralInfo$Tree.Age), decreasing = TRUE)
MS_Age <- table(GeneralInfo[c("Tree.Age", "Maintenance.vs.Stewardship")])
MS_Age
#For all papers
AgeClass_mat <- as.data.frame(matrix(0, ncol=2, nrow=length(names(AgeClass))))
AgeClass_mat[,1] <- names(AgeClass)
AgeClass_mat[,2] <- as.vector(AgeClass)
names(AgeClass_mat) <- c("group", "value")
AgeClass_mat
knitr::opts_chunk$set(echo = TRUE)
DMdata <- read.csv("./DataModelers.csv")
Stakeholders <- read.csv("./Stakeholders.csv")
View(DMdata)
View(Stakeholders)
DMdata <- read.csv("./DataModelers.csv")
Stakeholders <- read.csv("./Stakeholders.csv")
DMdata <- read.csv("./DataModelers.csv")
Stakeholders <- read.csv("./Stakeholders.csv")
##data modelers
DMdata <- DMdata[!is.null(DMdata$Person.Group.Name),]
View(Stakeholders)
View(DMdata)
##stakeholders
Stakeholders <- Stakeholders[!is.null(Stakeholders$Organization.s.),]
View(DMdata)
##stakeholders
Stakeholders <- Stakeholders[!is.na(Stakeholders$Organization.s.),]
##stakeholders
Stakeholders <- Stakeholders[!is.null(Stakeholders$Organization.s.),]
tail(Stakeholders$Organization.s.)
##stakeholders
Stakeholders <- Stakeholders[c(!is.null(Stakeholders$Organization.s.) &Stakeholders$Organization.s. !="") ,]
View(Stakeholders)
##stakeholders
StakeTypeNotes <- Stakeholders$Type.Notes
StakeLocations <- Stakeholders$Region
head(StakeLocations)
StakeTypeNotes <- strsplit(StakeTypeNotes, ",")
head(StakeTypeNotes)
StakeTypeNotes <- as.vector(strsplit(StakeTypeNotes, ","))
##stakeholders
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- as.vector(strsplit(StakeTypeNotes, ","))
head(StakeTypeNotes)
length(StakeTypeNotes)
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
rtypes[j]
rtypes
i
rtypes
length(rtypes)
View(Stakeholders)
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
sTypesUnique
##stakeholders
#get the actual list of stakeholder types
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- strsplit(StakeTypeNotes, ", ")
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
sTypesUnique
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
head(StakeLocations)
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
#turn it into a list of unique types to reference
sLocUnique <- c()
for (i in 1:length(StakeLocations)){
rlocs <- StakeLocations[[i]]
#No location information
if (length(rlocs) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rlocs)){
#if already in the list
if (rlocs[j] %in% sLocUnique){
next
} else { #if not in the list, add it
sLocUnique <- c(sLocUnique, rlocs[j])
}
}
}
sLocUnique
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations
sLocUnique
View(Stakeholders)
names(Stakeholders)
Stk_table <- Stakeholders[,c("Organization.s.", "Contact.Type", "Type.Notes", "Contacted", "Last.Contacted")]
Stk_table <- Stakeholders[,c("Organization.s.", "Contact.Type", "Contacted", "Last.Contacted")]
Stk_table$ID <- 1:length(Stk_table$Organization.s.)
head(Stk_table)
sLocUnique
head(StakeLocations)
head(Stakeholders)
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
Loc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
DMdata <- read.csv("./DataModelers.csv")
Stakeholders <- read.csv("./Stakeholders.csv")
##data modelers
DMdata <- DMdata[!is.null(DMdata$Person.Group.Name),]
##stakeholders
Stakeholders <- Stakeholders[c(!is.null(Stakeholders$Organization.s.) &Stakeholders$Organization.s. !="") ,]
###############Get some useful lists for the tables below
##data modelers
##stakeholders
#get the actual list of stakeholder types
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- strsplit(StakeTypeNotes, ", ")
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation", "Science and Education")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration", "Education")
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
# #turn it into a list of unique types to reference
# sLocUnique <- c()
# for (i in 1:length(StakeLocations)){
#   rlocs <- StakeLocations[[i]]
#
#   #No location information
#   if (length(rlocs) == 0){
#     next
#   }
#
#   #in case you have multiple values within a line
#   for (j in 1:length(rlocs)){
#
#     #if already in the list
#     if (rlocs[j] %in% sLocUnique){
#       next
#
#     } else { #if not in the list, add it
#       sLocUnique <- c(sLocUnique, rlocs[j])
#     }
#   }
#
# }
##add states for the ones that are not states
##note that the cities had states attached so don't need to add states for those
#not doing anything with the cities right now, is a layer too complicated of a geography
#CityLocs <- c("Houston", "Galveston", "New Orleans", "St. Petersburg", "Tampa", "Mobile")
GCOOS_sts <- c("TX", "LA", "MS" ,"AL", "FL")
SECOORA_sts <- c("FL", "GA", "SC", "NC")
CARICOOS_sts <- c("PR", "VI")
AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
##For the future, if something says U.S. or Global I am just going to assign them to all the states.For Gulf of Mexico, going to assign it to GCOOS_sts
Stk_table <- Stakeholders[,c("Organization.s.", "Contact.Type", "Contacted", "Last.Contacted")]
Stk_table$ID <- 1:length(Stk_table$Organization.s.)
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
Loc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
Loc_table$names <- c("LID", "SID", "State")
names(Loc_table) <- c("LID", "SID", "State")
sLocUnique
knitr::opts_chunk$set(echo = TRUE)
#Get the hourly averages for each year
#Likely will need to update the files here once re-run with all the data and spin-up
HourlyMeans16 <- read.csv("../03ProcessedData/HourlyMeans_2016_021025.csv")
HourlyMeans17 <- read.csv("../03ProcessedData/HourlyMeans_2017_021025.csv")
head(HourlyMeans16)
library(ggplot2)
#temp and lat
ggplot(HourlyMeans17, aes(x=lat, y=X2mTemp)) +
geom_point()
#A little easier to mess around with
aftHours <- c(12,13,14,15,16,17,18)
AfternoonMeans16 <- HourlyMeans16[HourlyMeans16$hour %in% aftHours,]
AfternoonMeans17 <- HourlyMeans16[HourlyMeans17$hour %in% aftHours,]
#temp and lat
ggplot(AfternoonMeans16, aes(x=lat, y=X2mTemp, color=hour)) +
geom_point()
#temp and lat
ggplot(AfternoonMeans16, aes(x=lat, y=X2mTemp, color=as.factor(hour))) +
geom_point()
#temp and lat
ggplot(AfternoonMeans16, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point()
#A little easier to mess around with
aftHours <- c(14,15,16,17,18,19,20)
AfternoonMeans16 <- HourlyMeans16[HourlyMeans16$hour %in% aftHours,]
AfternoonMeans17 <- HourlyMeans16[HourlyMeans17$hour %in% aftHours,]
#temp and lat
ggplot(AfternoonMeans16, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point()
ggplot(AfternoonMeans16, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2016 Afternoon Temperatures with latitude") +
xlab("Latitude") + ylab("Temperature (C)")
ggplot(AfternoonMeans17, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2017 Afternoon Temperatures with latitude") +
xlab("Latitude") + ylab("Temperature (C)")
AfternoonMeans17 <- HourlyMeans17[HourlyMeans17$hour %in% aftHours,]
ggplot(AfternoonMeans16, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2016 Afternoon Temperatures with latitude") +
xlab("Latitude") + ylab("Temperature (C)")
ggplot(AfternoonMeans17, aes(x=lat, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2017 Afternoon Temperatures with latitude") +
xlab("Latitude") + ylab("Temperature (C)")
ggplot(AfternoonMeans16, aes(x=Dist2Ocean, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2016 Afternoon Temperatures with Distance to Ocean") +
xlab("Distance to Ocean (m)") + ylab("Temperature (C)")
ggplot(AfternoonMeans17, aes(x=Dist2Ocean, y=(X2mTemp-273.15), color=as.factor(hour))) +
geom_point() + ggtitle("2017 Afternoon Temperatures with Distance to Ocean") +
xlab("Distance to Ocean (m)") + ylab("Temperature (C)")
ggplot(AfternoonMeans16, aes(x=as.factor(LandUse), y=(X2mTemp-273.15))) +
geom_boxplot() + ggtitle("2016 Afternoon Temperatures by Land Use") +
xlab("Land Use") + ylab("Temperature (C)")
ggplot(AfternoonMeans17, aes(x=as.factor(LandUse), y=(X2mTemp-273.15))) +
geom_boxplot() + ggtitle("2017 Afternoon Temperatures by Land Use") +
xlab("Land Use") + ylab("Temperature (C)")
ggplot(AfternoonMeans16, aes(x=as.factor(hour), y=(X2mTemp-273.15), fill=as.factor(LandUse))) +
geom_boxplot() + ggtitle("2016 Afternoon Temperatures by Land Use") +
xlab("Hour") + ylab("Temperature (C)")
ggplot(AfternoonMeans17, aes(x=as.factor(hour), y=(X2mTemp-273.15), fill=as.factor(LandUse))) +
geom_boxplot() + ggtitle("2017 Afternoon Temperatures by Land Use") +
xlab("Hour") + ylab("Temperature (C)")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(spBayes) #spatial random effects
library(geoR) #variogram functions
#Get the hourly averages for each year
#Likely will need to update the files here once re-run with all the data and spin-up
HourlyMeans16 <- read.csv("../03ProcessedData/HourlyMeans_2016_021025.csv")
HourlyMeans17 <- read.csv("../03ProcessedData/HourlyMeans_2017_021025.csv")
#More for reference
LU_names = c('Evergreen Needleleaf Forest', 'Evergreen Broadleaf Forest',
'Deciduous Needleleaf Forest', 'Deciduous Broadleaf Forest',
'Mixed Forests', 'Closed Shrublands',  'Open Shrublands',
'Woody Savannas', 'Savannas', 'Grasslands',
'Permanent wetlands', 'Croplands', 'Urban and Built-Up',
'cropland/natural vegetation mosaic',
'Snow and Ice', 'Barren or Sparsely Vegetated', 'Water')
NewLUs <- c('Forest', 'Forest', 'Forest', 'Forest', 'Forest',
'Shrub/Savanna', 'Shrub/Savanna', 'Shrub/Savanna', 'Shrub/Savanna',
"Shrub/Savanna", "Wetlands", "Crop", "Urban", "Crop", "Snow",
"Barren", "Water")
NewLU_nums <- c(1,1,1,1,1,2,2,2,2,2,3,4,5,4,6,7,8)
LU_dict <- as.data.frame(matrix(0, nrow=17, ncol=4))
names(LU_dict) <- c("Original_Name", "Original_Num", "New_Name", "New_Num")
LU_dict$Original_Name <- LU_names
LU_dict$Original_Num <- 1:17
LU_dict$New_Name <- NewLUs
LU_dict$New_Num <- NewLU_nums
#Pick an hour of data to look at to make this a bit simpler
#thinking 17 since it is kind of between the shift in aft to evening temps
MidAftTemp16 <- HourlyMeans16[HourlyMeans16$hour == 17,]
MidAftTemp17 <- HourlyMeans17[HourlyMeans17$hour == 17,]
##start to look at varigrams for temp - 2016
varDatTemp16 <- as.geodata(MidAftTemp16, coords.col = 2:3, data.col=5)
plot(varDatTemp16)
v1Temp16 <- variog(varDatTemp16, trend="1st", option="bin")
plot(v1Temp16)
v1Temp16.c <- variog(varDatTemp16, op="cloud")
v1Temp16.bc <- variog(varDatTemp16, bin.cloud=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(geoR) #variogram functions
#Get the hourly averages for each year
#Likely will need to update the files here once re-run with all the data and spin-up
HourlyMeans16 <- read.csv("../03ProcessedData/HourlyMeans_2016_021025.csv")
HourlyMeans17 <- read.csv("../03ProcessedData/HourlyMeans_2017_021025.csv")
#More for reference
LU_names = c('Evergreen Needleleaf Forest', 'Evergreen Broadleaf Forest',
'Deciduous Needleleaf Forest', 'Deciduous Broadleaf Forest',
'Mixed Forests', 'Closed Shrublands',  'Open Shrublands',
'Woody Savannas', 'Savannas', 'Grasslands',
'Permanent wetlands', 'Croplands', 'Urban and Built-Up',
'cropland/natural vegetation mosaic',
'Snow and Ice', 'Barren or Sparsely Vegetated', 'Water')
NewLUs <- c('Forest', 'Forest', 'Forest', 'Forest', 'Forest',
'Shrub/Savanna', 'Shrub/Savanna', 'Shrub/Savanna', 'Shrub/Savanna',
"Shrub/Savanna", "Wetlands", "Crop", "Urban", "Crop", "Snow",
"Barren", "Water")
NewLU_nums <- c(1,1,1,1,1,2,2,2,2,2,3,4,5,4,6,7,8)
LU_dict <- as.data.frame(matrix(0, nrow=17, ncol=4))
names(LU_dict) <- c("Original_Name", "Original_Num", "New_Name", "New_Num")
LU_dict$Original_Name <- LU_names
LU_dict$Original_Num <- 1:17
LU_dict$New_Name <- NewLUs
LU_dict$New_Num <- NewLU_nums
MidAftTemp16 <- HourlyMeans16[HourlyMeans16$hour == 17,]
MidAftTemp17 <- HourlyMeans17[HourlyMeans17$hour == 17,]
#varigrams for RH 2017
varDatRH17 <- as.geodata(MidAftTemp17, coords.col = 2:3, data.col=6)
plot(varDatRH17)
v1RH17 <- variog(varDatRH17, trend="1st", option="bin")
plot(v1RH17)
#v1RH17.c <- variog(varDatRH17, op="cloud")
v1RH17.bc <- variog(varDatRH17, bin.cloud=TRUE)
#plot(v1RH17.c, main="variogram cloud 2017 Relative Humidity")
plot(v1RH17.bc, bin.cloud=TRUE, main="clouds for binned variogram 2017 Relative Humidity")
