Stakeholders <- read.csv("../01Data/Stakeholders.csv")
##stakeholders
Stakeholders <- Stakeholders[c(!is.null(Stakeholders$Organization.s.) &Stakeholders$Organization.s. !="") ,]
###############Get some useful lists for the tables below
##data modelers
##stakeholders
#get the actual list of stakeholder types
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- strsplit(StakeTypeNotes, ", ")
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation", "Science and Education")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration", "Education")
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
# #turn it into a list of unique types to reference
# sLocUnique <- c()
# for (i in 1:length(StakeLocations)){
#   rlocs <- StakeLocations[[i]]
#
#   #No location information
#   if (length(rlocs) == 0){
#     next
#   }
#
#   #in case you have multiple values within a line
#   for (j in 1:length(rlocs)){
#
#     #if already in the list
#     if (rlocs[j] %in% sLocUnique){
#       next
#
#     } else { #if not in the list, add it
#       sLocUnique <- c(sLocUnique, rlocs[j])
#     }
#   }
#
# }
##add states for the ones that are not states
##note that the cities had states attached so don't need to add states for those
#not doing anything with the cities right now, is a layer too complicated of a geography
#CityLocs <- c("Houston", "Galveston", "New Orleans", "St. Petersburg", "Tampa", "Mobile")
GCOOS_sts <- c("TX", "LA", "MS" ,"AL", "FL")
SECOORA_sts <- c("FL", "GA", "SC", "NC")
CARICOOS_sts <- c("PR", "VI")
AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
##For the future, if something says U.S. or Global I am just going to assign them to all the states.For Gulf of Mexico, going to assign it to GCOOS_sts
sTypesUnique
knitr::opts_chunk$set(echo = TRUE)
DMdata <- read.csv("../01Data/DataModelers.csv")
Stakeholders <- read.csv("../01Data/Stakeholders.csv")
##stakeholders
Stakeholders <- Stakeholders[c(!is.null(Stakeholders$Organization.s.) &Stakeholders$Organization.s. !="") ,]
###############Get some useful lists for the tables below
##data modelers
##stakeholders
#get the actual list of stakeholder types
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- strsplit(StakeTypeNotes, ", ")
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration")
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
# #turn it into a list of unique types to reference
# sLocUnique <- c()
# for (i in 1:length(StakeLocations)){
#   rlocs <- StakeLocations[[i]]
#
#   #No location information
#   if (length(rlocs) == 0){
#     next
#   }
#
#   #in case you have multiple values within a line
#   for (j in 1:length(rlocs)){
#
#     #if already in the list
#     if (rlocs[j] %in% sLocUnique){
#       next
#
#     } else { #if not in the list, add it
#       sLocUnique <- c(sLocUnique, rlocs[j])
#     }
#   }
#
# }
##add states for the ones that are not states
##note that the cities had states attached so don't need to add states for those
#not doing anything with the cities right now, is a layer too complicated of a geography
#CityLocs <- c("Houston", "Galveston", "New Orleans", "St. Petersburg", "Tampa", "Mobile")
GCOOS_sts <- c("TX", "LA", "MS" ,"AL", "FL")
SECOORA_sts <- c("FL", "GA", "SC", "NC")
CARICOOS_sts <- c("PR", "VI")
AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
##For the future, if something says U.S. or Global I am just going to assign them to all the states.For Gulf of Mexico, going to assign it to GCOOS_sts
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
Loc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(Loc_table) <- c("LID", "SID", "State")
RegionalNames <- c("Global", "U.S.", "Gulf of Mexico")
#go through and fill out the table
rw_iter <- 1
for (i in 1:length(StakeLocations)){
rlocs <- StakeLocations[[i]]
#No location information
if (length(rlocs) == 0){
print(paste("Warning, no location for", Stakeholders$Organization.s.[i]))
next
}
#in case you have multiple values within a line
for (j in 1:length(rlocs)){
##check what the location type is
#AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
if (rlocs[j] %in% AllRA_sts){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- rlocs[j]
rw_iter = rw_iter + 1
} else if (rlocs[j] %in% RegionalNames){ #if it covers the whole area
if (rlocs[j] == "Gulf of Mexico") {#just GCOOS area
#add each Gulf State
for (l in 1:length(GCOOS_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- GCOOS_sts[l]
rw_iter = rw_iter + 1
}
} else { #Cover our entire area of interest
##Add all our states
for (g in 1:length(AllRA_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- AllRA_sts[g]
rw_iter = rw_iter + 1
}
} #end if/else for regional groupings
} else{ #skip it because it is presumably a city/state that is not relevant to us rn
next
} #end state loop
} #end overall loop
}
Stk_table <- Stakeholders[,c("Organization.s.", "Contact.Type", "Region", "Contacted", "Last.Contacted")]
Stk_table$SID <- 1:length(Stk_table$Organization.s.)
write.csv(Stk_table, "../01Data/Processed/Stakeholder_Info.csv")
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
Loc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(Loc_table) <- c("LID", "SID", "State")
RegionalNames <- c("Global", "U.S.", "Gulf of Mexico")
#go through and fill out the table
rw_iter <- 1
for (i in 1:length(StakeLocations)){
rlocs <- StakeLocations[[i]]
#No location information
if (length(rlocs) == 0){
print(paste("Warning, no location for", Stakeholders$Organization.s.[i]))
next
}
#in case you have multiple values within a line
for (j in 1:length(rlocs)){
##check what the location type is
#AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
if (rlocs[j] %in% AllRA_sts){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- rlocs[j]
rw_iter = rw_iter + 1
} else if (rlocs[j] %in% RegionalNames){ #if it covers the whole area
if (rlocs[j] == "Gulf of Mexico") {#just GCOOS area
#add each Gulf State
for (l in 1:length(GCOOS_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- GCOOS_sts[l]
rw_iter = rw_iter + 1
}
} else { #Cover our entire area of interest
##Add all our states
for (g in 1:length(AllRA_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- AllRA_sts[g]
rw_iter = rw_iter + 1
}
} #end if/else for regional groupings
} else{ #skip it because it is presumably a city/state that is not relevant to us rn
next
} #end state loop
} #end overall loop
}
#clean it up
Loc_table <- Loc_table[Loc_table$LID !=0,]
write.csv(Loc_table, "../01Data/Processed/Stakeholder_Locs.csv")
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation", "Science and Education", "education")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration", "Education", "Education")
##Others that need updating
maxRows <- length(sTypesUnique)*length(Stakeholders$Organization.s.)
Types_tables <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(Types_tables) <- c("TID", "SID", "TypeDescription")
#Go through and add information to the table
rw_iter <- 1
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if need to change the spelling or item
if (rtypes[j] %in% Incorrect_stk){
rtypes[j] <- Translate_stk[match(rtypes[j], Incorrect_stk)]
}
Types_tables$TID[rw_iter] <- rw_iter
Types_tables$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Types_tables$TypeDescription[rw_iter] <- rtypes[j]
rw_iter <- rw_iter + 1
} #end of the j loop
} #end of the i loop
#clean it up
Types_tables <- Types_tables[Types_tables$TID !=0,]
write.csv(Types_tables, "../01Data/Processed/Stakeholder_Types.csv")
knitr::opts_chunk$set(echo = TRUE)
DMdata <- read.csv("../01Data/DataModelers.csv")
Stakeholders <- read.csv("../01Data/Stakeholders.csv")
##stakeholders
Stakeholders <- Stakeholders[c(!is.null(Stakeholders$Organization.s.) &Stakeholders$Organization.s. !="") ,]
###############Get some useful lists for the tables below
##data modelers
##stakeholders
#get the actual list of stakeholder types
StakeTypeNotes <- Stakeholders$Type.Notes
StakeTypeNotes <- strsplit(StakeTypeNotes, ", ")
#turn it into a list of unique types to reference
sTypesUnique <- c()
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if already in the list
if (rtypes[j] %in% sTypesUnique){
next
} else { #if not in the list, add it
sTypesUnique <- c(sTypesUnique, rtypes[j])
}
}
}
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration")
##same idea but for locations
StakeLocations <- Stakeholders$Region
StakeLocations <- strsplit(StakeLocations, ", ")
# #turn it into a list of unique types to reference
# sLocUnique <- c()
# for (i in 1:length(StakeLocations)){
#   rlocs <- StakeLocations[[i]]
#
#   #No location information
#   if (length(rlocs) == 0){
#     next
#   }
#
#   #in case you have multiple values within a line
#   for (j in 1:length(rlocs)){
#
#     #if already in the list
#     if (rlocs[j] %in% sLocUnique){
#       next
#
#     } else { #if not in the list, add it
#       sLocUnique <- c(sLocUnique, rlocs[j])
#     }
#   }
#
# }
##add states for the ones that are not states
##note that the cities had states attached so don't need to add states for those
#not doing anything with the cities right now, is a layer too complicated of a geography
#CityLocs <- c("Houston", "Galveston", "New Orleans", "St. Petersburg", "Tampa", "Mobile")
GCOOS_sts <- c("TX", "LA", "MS" ,"AL", "FL")
SECOORA_sts <- c("FL", "GA", "SC", "NC")
CARICOOS_sts <- c("PR", "VI")
AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
##For the future, if something says U.S. or Global I am just going to assign them to all the states.For Gulf of Mexico, going to assign it to GCOOS_sts
Stk_table <- Stakeholders[,c("Organization.s.", "Contact.Type", "Region", "Contacted", "Last.Contacted")]
Stk_table$SID <- 1:length(Stk_table$Organization.s.)
write.csv(Stk_table, "../01Data/Processed/Stakeholder_Info.csv")
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
Loc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(Loc_table) <- c("LID", "SID", "State")
RegionalNames <- c("Global", "U.S.", "Gulf of Mexico")
#go through and fill out the table
rw_iter <- 1
for (i in 1:length(StakeLocations)){
rlocs <- StakeLocations[[i]]
#No location information
if (length(rlocs) == 0){
print(paste("Warning, no location for", Stakeholders$Organization.s.[i]))
next
}
#in case you have multiple values within a line
for (j in 1:length(rlocs)){
##check what the location type is
#AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
if (rlocs[j] %in% AllRA_sts){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- rlocs[j]
rw_iter = rw_iter + 1
} else if (rlocs[j] %in% RegionalNames){ #if it covers the whole area
if (rlocs[j] == "Gulf of Mexico") {#just GCOOS area
#add each Gulf State
for (l in 1:length(GCOOS_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- GCOOS_sts[l]
rw_iter = rw_iter + 1
}
} else { #Cover our entire area of interest
##Add all our states
for (g in 1:length(AllRA_sts)){
Loc_table$LID[rw_iter] <- rw_iter
Loc_table$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Loc_table$State[rw_iter] <- AllRA_sts[g]
rw_iter = rw_iter + 1
}
} #end if/else for regional groupings
} else{ #skip it because it is presumably a city/state that is not relevant to us rn
next
} #end state loop
} #end overall loop
}
#clean it up
Loc_table <- Loc_table[Loc_table$LID !=0,]
write.csv(Loc_table, "../01Data/Processed/Stakeholder_Locs.csv")
##Keep track of spelling issues
Incorrect_stk <- c("community", "resilience", "conservation", "Science and Education", "education")
Translate_stk <- c("Community", "Resilience", "Conservation/Restoration", "Education", "Education")
##Others that need updating
maxRows <- length(sTypesUnique)*length(Stakeholders$Organization.s.)
Types_tables <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(Types_tables) <- c("TID", "SID", "TypeDescription")
#Go through and add information to the table
rw_iter <- 1
for (i in 1:length(StakeTypeNotes)){
rtypes <- StakeTypeNotes[[i]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
#if need to change the spelling or item
if (rtypes[j] %in% Incorrect_stk){
rtypes[j] <- Translate_stk[match(rtypes[j], Incorrect_stk)]
}
Types_tables$TID[rw_iter] <- rw_iter
Types_tables$SID[rw_iter] <- Stk_table$SID[i] #get the stakeholder ID
Types_tables$TypeDescription[rw_iter] <- rtypes[j]
rw_iter <- rw_iter + 1
} #end of the j loop
} #end of the i loop
#clean it up
Types_tables <- Types_tables[Types_tables$TID !=0,]
write.csv(Types_tables, "../01Data/Processed/Stakeholder_Types.csv")
##data modelers
DMdata <- DMdata[!is.null(DMdata$Person.Group.Name),]
##for now, going to just say what these are, but could do a similar process as for Stakeholders to get the unique values
u_contactType <- c("Data Collection", "Outreach", "Models")
u_expertiseCat <- c("Ocean observing", "Atmospheric Science", "Stakeholder outreach", "Fisheries", "General observations")
#locations (same as for stakeholders)
GCOOS_sts <- c("TX", "LA", "MS" ,"AL", "FL")
SECOORA_sts <- c("FL", "GA", "SC", "NC")
CARICOOS_sts <- c("PR", "VI")
#for ones that cover the whole region
AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
DM_table <- DMdata[, c("Person.Group.Name","Organization.s.", "Location", "Specific.Location", "Last.Contacted", "Notes")]
DM_table$ID <- 1:length(DM_table$Person.Group.Name)
write.csv(DM_table, "../01Data/Processed/DataModeler_Info.csv")
##start from StakeLocations
maxRows <- length(AllRA_sts) * length(StakeLocations)
#create the storage table
DMLoc_table <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(DMLoc_table) <- c("LID", "ID", "State")
#go through and fill out the table
rw_iter <- 1
for (i in 1:length(DMdata$State.Coverage)){
#splitting it one at a time this time
rlocs <- strsplit(DMdata$State.Coverage[i], ", ")[[1]]
#No location information
if (length(rlocs) == 0){
print(paste("Warning, no location for", Stakeholders$Organization.s.[i]))
next
}
#in case you have multiple values within a line
for (j in 1:length(rlocs)){
##check what the location type is
#AllRA_sts <- unique(c(GCOOS_sts, SECOORA_sts, CARICOOS_sts))
if (rlocs[j] %in% AllRA_sts){
DMLoc_table$LID[rw_iter] <- rw_iter
DMLoc_table$ID[rw_iter] <- DM_table$ID[i] #get the stakeholder ID
DMLoc_table$State[rw_iter] <- rlocs[j]
rw_iter = rw_iter + 1
} else if (rlocs[j] == "Global"){ #if it covers the whole area
##Add all our states
for (g in 1:length(AllRA_sts)){
DMLoc_table$LID[rw_iter] <- rw_iter
DMLoc_table$ID[rw_iter] <- DM_table$ID[i] #get the stakeholder ID
DMLoc_table$State[rw_iter] <- AllRA_sts[g]
rw_iter = rw_iter + 1
} #add all the states
} else{ #skip it because it is presumably a city/state that is not relevant to us rn
print(paste("Error: Location", rlocs[j], "not recognized for location ID", DM_table$ID[i]))
next
} #end state loop
} #end overall loop
}
#clean it up
DMLoc_table <- DMLoc_table[DMLoc_table$LID !=0,]
write.csv(DMLoc_table, "../01Data/Processed/DataModeler_Locs.csv")
maxRows <- length(u_contactType)*length(DMdata$Person.Group.Name)
DMTypes_tables <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(DMTypes_tables) <- c("TID", "ID", "ContactType")
#Go through and add information to the table
rw_iter <- 1
for (i in 1:length(DMdata$Contact.Type)){
rtypes <- strsplit(DMdata$Contact.Type[i], ", ")[[1]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
DMTypes_tables$TID[rw_iter] <- rw_iter
DMTypes_tables$ID[rw_iter] <- DM_table$ID[i] #get the stakeholder ID
DMTypes_tables$ContactType[rw_iter] <- rtypes[j]
rw_iter <- rw_iter + 1
} #end of the j loop
} #end of the i loop
#clean it up
DMTypes_tables <- DMTypes_tables[DMTypes_tables$TID !=0,]
write.csv(DMTypes_tables, "../01Data/Processed/DataModeler_Types.csv")
maxRows <- length(u_expertiseCat)*length(DMdata$Person.Group.Name)
DMExp_tables <- as.data.frame(matrix(0, ncol=3, nrow=maxRows))
names(DMExp_tables) <- c("EID", "ID", "Expertise")
#Go through and add information to the table
rw_iter <- 1
for (i in 1:length(DMdata$Expertise.Category)){
rtypes <- strsplit(DMdata$Expertise.Category[i], ", ")[[1]]
#No type information
if (length(rtypes) == 0){
next
}
#in case you have multiple values within a line
for (j in 1:length(rtypes)){
DMExp_tables$EID[rw_iter] <- rw_iter
DMExp_tables$ID[rw_iter] <- DM_table$ID[i] #get the stakeholder ID
DMExp_tables$Expertise[rw_iter] <- rtypes[j]
rw_iter <- rw_iter + 1
} #end of the j loop
} #end of the i loop
#clean it up
DMExp_tables <- DMExp_tables[DMExp_tables$EID !=0,]
write.csv(DMExp_tables, "../01Data/Processed/DataModeler_Expert.csv")
